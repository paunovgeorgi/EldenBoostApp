// <auto-generated />
using System;
using EldenBoost.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EldenBoost.Infrastructure.Migrations
{
    [DbContext(typeof(EldenBoostDbContext))]
    [Migration("20241120124256_IsDemotedFlag_AddedTo_BoosterAndAuthor")]
    partial class IsDemotedFlag_AddedTo_BoosterAndAuthor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationPlatform", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationId");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("PlatformId");

                    b.HasKey("ApplicationId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("ApplicationsPlatforms", (string)null);
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Application.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int")
                        .HasComment("Type of application submitted by the user.");

                    b.Property<int>("Availability")
                        .HasColumnType("int")
                        .HasComment("Availability status of the applicant, typically represented in hours or a defined scale.");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of the applicant.");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Experience level or description provided by the applicant.");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the application has been approved.");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the application has been rejected.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the application.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Nickname for application user");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Profile picture application user.");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a13592d9-c4d0-4184-a3f9-dc7c66640808",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b68cd68-a808-4e53-9ea7-1f931783569b",
                            Email = "cloud@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Cloud",
                            NormalizedEmail = "CLOUD@BOOSTER.COM",
                            NormalizedUserName = "CLOUD@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5T879iBYxBh+xWkrGhKIEvuAbYN8ulSfrrl2jfaK47wdb3qmXJyj1zqjK9B/Y7tw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/boosters/cloud.jpg",
                            SecurityStamp = "0d08d170-07da-4dc9-bc6f-01bf1fc3c2b2",
                            TwoFactorEnabled = false,
                            UserName = "cloud@booster.com"
                        },
                        new
                        {
                            Id = "b4e77aa9-36ad-4010-987e-9fd6d7b0d6ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8122c8bf-7067-4647-82b9-ff3d7effded0",
                            Email = "heisenberg@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. White",
                            NormalizedEmail = "HEISENBERG@BOOSTER.COM",
                            NormalizedUserName = "HEISENBERG@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQYgUS3t2oexVnfp9Fga6KbuL5cngULPmYuPT4jjxITXqBqcWjFOs13bA9BDUE5hA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/boosters/heisenberg.jpg",
                            SecurityStamp = "d4c922c6-32c4-4a1b-b1db-2c8adf933f3a",
                            TwoFactorEnabled = false,
                            UserName = "heisenberg@booster.com"
                        },
                        new
                        {
                            Id = "54cf5237-4a7c-4050-9570-7cb5cb753aa5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b77e560-cd55-4300-a21f-51240d2f9879",
                            Email = "dva@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "D.VA",
                            NormalizedEmail = "DVA@BOOSTER.COM",
                            NormalizedUserName = "DVA@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELHAjT9rOy08q7V0AV8zEu2Tn7xqZOY0CXoP6EXXJp+x3NFzw0w6nZDf9zNVpOE/uQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/boosters/dva.jpg",
                            SecurityStamp = "ddcd75da-cec8-4af9-a6b1-431b0318deac",
                            TwoFactorEnabled = false,
                            UserName = "dva@booster.com"
                        },
                        new
                        {
                            Id = "ca3439dd-d67e-4733-8b72-a497af8b4c64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e36334da-b468-4cdf-a3e7-8139ea748fe2",
                            Email = "johnwick@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. Wick",
                            NormalizedEmail = "JOHNWICK@BOOSTER.COM",
                            NormalizedUserName = "JOHNWICK@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVzmn5NFoTRUuuHUKVyfmmRTWrPcbuu6Ra9B8H3Wu7iw4Svbi7z5PJbmqnpuVF/Qw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/boosters/john-wick.jpg",
                            SecurityStamp = "b941b00b-eb2c-4696-b962-a6c619d32dad",
                            TwoFactorEnabled = false,
                            UserName = "johnwick@booster.com"
                        },
                        new
                        {
                            Id = "362456a6-e52a-4065-a619-7af22c96e1e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3894bae-3323-44b4-8328-22c1002e6008",
                            Email = "obiwan@author.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Master Kenobi",
                            NormalizedEmail = "OBIWAN@AUTHOR.COM",
                            NormalizedUserName = "OBIWAN@AUTHOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAmZ/V77HbzpRFpoEcCC34F1bhMTHMMOnSzBkoNvw2VJpkuETco2FukW74PFgcX3sg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/authors/obiwan.jpg",
                            SecurityStamp = "858b9fcd-d39c-4414-80df-2c503503b4a1",
                            TwoFactorEnabled = false,
                            UserName = "obiwan@author.com"
                        },
                        new
                        {
                            Id = "851792db-67bb-4b08-8c03-ac2643a0600a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10c55e1b-5855-45e9-b76c-e88c87dc816c",
                            Email = "quigon@author.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Qui-Gon-Jinn",
                            NormalizedEmail = "QUIGON@AUTHOR.COM",
                            NormalizedUserName = "QUIGON@AUTHOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDI1cJmL33M+0a/OQo1GNZ8EsX9qF7Q1z9iUSCAQrmNc4QSFW2ycwyua2cPj6Q2qUA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/authors/quigon.jpg",
                            SecurityStamp = "b791595c-8aaf-41d1-a68c-e24f476660f0",
                            TwoFactorEnabled = false,
                            UserName = "quigon@author.com"
                        },
                        new
                        {
                            Id = "2eff52b0-3277-456f-ac78-34553d260ac6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca5e6ad0-3eb2-45ec-92a3-a39c527ab158",
                            Email = "thebat@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Master Wayne",
                            NormalizedEmail = "THEBAT@CLIENT.COM",
                            NormalizedUserName = "THEBAT@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENf3vAliiyst1EHSROTMr6VoYmMeTY8bqXphQNZil6wPXJ7gnVNwBLud49GSyrb/dQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/clients/thebat.jpg",
                            SecurityStamp = "63f7bf42-b837-44f0-9572-24204c37b330",
                            TwoFactorEnabled = false,
                            UserName = "thebat@client.com"
                        },
                        new
                        {
                            Id = "1291e6cd-1aac-4f8a-af4d-4980f64aff27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77189597-759d-434b-b05f-57f1170e0486",
                            Email = "theone@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. Anderson",
                            NormalizedEmail = "THEONE@CLIENT.COM",
                            NormalizedUserName = "THEONE@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPO92FQG1+S09qASL77UagDEuB4ulkK1Uz0L+xcRu6PfOcXzz3hqx/n3OcTpRXw23Q==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/clients/theone.jpg",
                            SecurityStamp = "cdea3dbf-8135-4ca1-9172-82dbc972706d",
                            TwoFactorEnabled = false,
                            UserName = "theone@client.com"
                        },
                        new
                        {
                            Id = "97e8127d-abaf-4980-9938-e388453fcbb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6e049fa-338a-4e10-b7ba-8128f03697dd",
                            Email = "leon@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Leon S. Kennedy",
                            NormalizedEmail = "LEON@CLIENT.COM",
                            NormalizedUserName = "LEON@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHXgGMkPiUbfq44g7NXOjbDGMJPq3Hd29hRpStu7ZIrfgDjVBh96guUi4CBDxPDQw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/clients/leon.jpg",
                            SecurityStamp = "473df791-afe4-41ab-9af4-f8156376e8a2",
                            TwoFactorEnabled = false,
                            UserName = "leon@client.com"
                        },
                        new
                        {
                            Id = "871505e9-3338-487d-8496-760de2e1f2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a25e8ba-8b44-40ae-b2da-95e1121d81f7",
                            Email = "dante@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Dante",
                            NormalizedEmail = "DANTE@CLIENT.COM",
                            NormalizedUserName = "DANTE@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlkpGWUBylhAERIi+yTdaxXxU+Ua0YZSD/PzRG3kwKTFWNn79JXoo6Bf7nRV/MPNQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/clients/dante.jpeg",
                            SecurityStamp = "95aac6e9-a0b0-4546-9d71-38f3e2006b4c",
                            TwoFactorEnabled = false,
                            UserName = "dante@client.com"
                        },
                        new
                        {
                            Id = "698b474f-7790-4ae6-b186-a3ba3405bf99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e85464ff-41a4-43ee-a612-1e44020e6667",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVryFzRxyHyXxG8e/B8xy252jx2iq8Z0TTTcxYx2a2YZYgtdsRdCxWMyyZWflVXuw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "/images/admin.jpg",
                            SecurityStamp = "6f108206-f482-437e-bdcb-68bae8980e9f",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Article.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleType")
                        .HasColumnType("int")
                        .HasComment("Type of Article, represented by the ArticleType enumeration.");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("ID of the author who created the Article.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Main content of the Article.");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the image associated with the Article.");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Article was released or published.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the Article.");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleType = 0,
                            AuthorId = 1,
                            Content = "Elden Ring offers players a vast array of formidable foes, each more challenging than the last. In this article, we explore the toughest bosses that push players to their limits. Whether you're facing the relentless strikes of Malenia or the monstrous attacks of Radahn, we’ll dive into the bosses that have left a lasting impact on the community. Prepare to relive some of the most intense and rewarding encounters Elden Ring has to offer.",
                            ImageURL = "/images/articles/toughest-bosses.jpg",
                            ReleaseDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Toughest Bosses in Elden Ring"
                        },
                        new
                        {
                            Id = 2,
                            ArticleType = 1,
                            AuthorId = 1,
                            Content = "In this article, we dive deep into the best weapons for every stage of Elden Ring. From the devastating power of colossal swords to the agility of twin blades, we cover a range of weapons to suit any playstyle. Each weapon offers a unique gameplay experience, and our guide will help you maximize your potential by selecting the best gear to fit your build and approach.",
                            ImageURL = "/images/articles/best-weapons.jpg",
                            ReleaseDate = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Best Weapons in Elden Ring"
                        },
                        new
                        {
                            Id = 3,
                            ArticleType = 0,
                            AuthorId = 2,
                            Content = "Elden Ring is a game rich with hidden secrets and subtle story elements. In this article, we bring you a curated list of Easter eggs and obscure details that you might have overlooked in your journey through the Lands Between. From unique NPC dialogues to hidden locations and items, discover the hidden lore and secrets that make the world of Elden Ring come alive in unexpected ways.",
                            ImageURL = "/images/articles/secrets.jpg",
                            ReleaseDate = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Elden Ring: Secrets You Might Have Missed"
                        },
                        new
                        {
                            Id = 4,
                            ArticleType = 0,
                            AuthorId = 2,
                            Content = "The latest patch has introduced some significant changes in Elden Ring. This article breaks down the most impactful updates, from balancing tweaks to bug fixes and new features. We'll go over which changes will affect players the most and what new content you can look forward to in this updated version of the game.",
                            ImageURL = "/images/articles/patch-notes.jpg",
                            ReleaseDate = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Elden Ring: Patch Notes Breakdown"
                        },
                        new
                        {
                            Id = 5,
                            ArticleType = 1,
                            AuthorId = 1,
                            Content = "Malenia is one of the most challenging encounters in Elden Ring, known for her devastating attacks and regenerating health. This guide provides detailed strategies for overcoming her attacks and defeating her. We'll cover the best equipment, skills, and techniques to maximize your chances against this formidable foe. With careful preparation and the right tactics, you can emerge victorious from one of the hardest fights in the game.",
                            ImageURL = "/images/articles/malenia.jpg",
                            ReleaseDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "How to Beat Malenia, Blade of Miquella"
                        },
                        new
                        {
                            Id = 6,
                            ArticleType = 1,
                            AuthorId = 2,
                            Content = "This article delves into the best character builds for various playstyles, from powerful melee warriors to skilled sorcerers. Whether you're seeking the ultimate PvE powerhouse or a versatile PvP build, we cover all the options to help you create a character that suits your preferred approach. Get ready to take on any challenge in the Lands Between with these optimized builds.",
                            ImageURL = "/images/articles/best-builds.jpg",
                            ReleaseDate = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Elden Ring: The Best Builds for Every Playstyle"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Author");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of residence for the Author.");

                    b.Property<bool>("IsDemoted")
                        .HasColumnType("bit")
                        .HasComment("Flag for Active and Demoted authors.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the author.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Tatooine",
                            IsDemoted = false,
                            UserId = "362456a6-e52a-4065-a619-7af22c96e1e1"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Coruscant",
                            IsDemoted = false,
                            UserId = "851792db-67bb-4b08-8c03-ac2643a0600a"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Booster.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of residence for the Booster.");

                    b.Property<bool>("IsDemoted")
                        .HasColumnType("bit")
                        .HasComment("Flag for Active and Demoted boosters.");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasComment("Current average rating of the Booster.");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int")
                        .HasComment("Total number of ratings received by the Booster.");

                    b.Property<decimal>("TotalEarned")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount earned by the Booster (completed orders only).");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the Booster.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Boosters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Japan",
                            IsDemoted = false,
                            Rating = 0.0,
                            RatingCount = 0,
                            TotalEarned = 0m,
                            UserId = "a13592d9-c4d0-4184-a3f9-dc7c66640808"
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            IsDemoted = false,
                            Rating = 0.0,
                            RatingCount = 0,
                            TotalEarned = 0m,
                            UserId = "b4e77aa9-36ad-4010-987e-9fd6d7b0d6ac"
                        },
                        new
                        {
                            Id = 3,
                            Country = "South Korea",
                            IsDemoted = false,
                            Rating = 0.0,
                            RatingCount = 0,
                            TotalEarned = 0m,
                            UserId = "54cf5237-4a7c-4050-9570-7cb5cb753aa5"
                        },
                        new
                        {
                            Id = 4,
                            Country = "United Kingdom",
                            IsDemoted = false,
                            Rating = 0.0,
                            RatingCount = 0,
                            TotalEarned = 0m,
                            UserId = "ca3439dd-d67e-4733-8b72-a497af8b4c64"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.BoosterPlatform", b =>
                {
                    b.Property<int>("BoosterId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("BoosterId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("BoosterPlatform");

                    b.HasData(
                        new
                        {
                            BoosterId = 1,
                            PlatformId = 1
                        },
                        new
                        {
                            BoosterId = 1,
                            PlatformId = 2
                        },
                        new
                        {
                            BoosterId = 2,
                            PlatformId = 1
                        },
                        new
                        {
                            BoosterId = 2,
                            PlatformId = 2
                        },
                        new
                        {
                            BoosterId = 2,
                            PlatformId = 3
                        },
                        new
                        {
                            BoosterId = 3,
                            PlatformId = 1
                        },
                        new
                        {
                            BoosterId = 3,
                            PlatformId = 3
                        },
                        new
                        {
                            BoosterId = 4,
                            PlatformId = 2
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<bool?>("HasStream")
                        .HasColumnType("bit");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsExpress")
                        .HasColumnType("bit");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SliderValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Order.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoosterId")
                        .HasColumnType("int")
                        .HasComment("ID of the assigned Booster, if any.");

                    b.Property<decimal>("BoosterPay")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount to be paid to the Booster.");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("ID of the client placing the order.");

                    b.Property<bool>("HasStream")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order includes streaming.");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional information provided for the Order.");

                    b.Property<bool>("IsAddedToPayment")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been added to a payment batch.");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been archived.");

                    b.Property<bool>("IsExpress")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order is an express request.");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been paid to the booster.");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been rated by the client.");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasComment("ID of the payment associated with the Order, if any.");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasComment("ID of the platform associated with the Order.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of the Order.");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("ID of the associated Service.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Current status of the Order.");

                    b.Property<DateTime>("TimeOfPurchase")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp of when the Order was placed.");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Payment.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount of the Payment.");

                    b.Property<int>("BoosterId")
                        .HasColumnType("int")
                        .HasComment("Foreign key linking the Payment to the associated Booster.");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Payment was completed.");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Payment has been completed.");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Payment was issued.");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Platform.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Name of the Platform.");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Playstation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Review.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(248)
                        .HasColumnType("nvarchar(248)")
                        .HasComment("Content of the review, limited to 248 characters.");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the review was created, defaulting to UTC now.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key referencing the User who created the review.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Amazing service! Got my Runes fast, and the booster was super friendly. Helped me clear some tough bosses I’ve been stuck on for weeks. Totally worth it! Will definitely use this service again. 10/10!",
                            ReviewDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2eff52b0-3277-456f-ac78-34553d260ac6"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Had an awesome experience! The boosting team was professional and kept me updated the whole time. Got all the items I wanted in no time. Highly recommended for anyone looking to enjoy Elden Ring without the grind",
                            ReviewDate = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1291e6cd-1aac-4f8a-af4d-4980f64aff27"
                        },
                        new
                        {
                            Id = 3,
                            Content = "I was skeptical at first, but the service was flawless. The booster got me through some difficult areas and my gear is maxed out now. Fast, safe, and affordable. If you need help, this is the place to go!",
                            ReviewDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "97e8127d-abaf-4980-9938-e388453fcbb4"
                        },
                        new
                        {
                            Id = 4,
                            Content = "I’ve been struggling with some of the harder bosses in Elden Ring, and this boost service saved me a ton of time. Professional, reliable, and quick delivery. If you’re stuck in the game, I highly recommend it!",
                            ReviewDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "871505e9-3338-487d-8496-760de2e1f2c2"
                        },
                        new
                        {
                            Id = 5,
                            Content = "The best boosting service out there! I needed some runes and boss kills, and they delivered everything faster than expected. The process was smooth, and my account was in safe hands. Will definitely come back!",
                            ReviewDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2eff52b0-3277-456f-ac78-34553d260ac6"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Fantastic job by the team! I got exactly what I asked for in a short time. The Play with a Pro option was especially fun – I learned so much. Super safe and legit, I couldn't have asked for a better experience.",
                            ReviewDate = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1291e6cd-1aac-4f8a-af4d-4980f64aff27"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Ordered a boosting service to get past some difficult bosses. The service was quick and efficient, and the booster communicated throughout. Completely satisfied with the results and highly recommend this service!",
                            ReviewDate = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "97e8127d-abaf-4980-9938-e388453fcbb4"
                        },
                        new
                        {
                            Id = 8,
                            Content = "A flawless service! Elden Ring is tough, but these guys made it easy. My character is leveled up, and I have all the gear I wanted. Great support, timely delivery, and no hassles. Can’t recommend them enough!",
                            ReviewDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "871505e9-3338-487d-8496-760de2e1f2c2"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Service.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(248)
                        .HasColumnType("nvarchar(248)")
                        .HasComment("Service description.");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Service image url.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for active and inactive services.");

                    b.Property<int>("MaxAmount")
                        .HasColumnType("int")
                        .HasComment("Max amount for slider type services.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Service price.");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("int")
                        .HasComment("Service purchase count.");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int")
                        .HasComment("Service type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Service title.");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "You will get a 100% game completion and all the items we aquire along the way!",
                            ImageURL = "/images/service/gameCompletion.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 300.00m,
                            PurchaseCount = 0,
                            ServiceType = 0,
                            Title = "Game Completion"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Select the boss you'd like us to defeat and our boosters will get the job done!",
                            ImageURL = "/images/service/bossKills.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 10.00m,
                            PurchaseCount = 0,
                            ServiceType = 2,
                            Title = "Boss Kills"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Select the desired amount of levels you'd like and we'll levep-up your character in no time!",
                            ImageURL = "/images/service/leveling.png",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 2.50m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Leveling"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A professional Elden Ring player will giude you and coach you along the way of your journey. Simply select the amount of hours you'd like to purchase.",
                            ImageURL = "/images/service/coaching.jpg",
                            IsActive = true,
                            MaxAmount = 20,
                            Price = 10.00m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Coaching"
                        },
                        new
                        {
                            Id = 5,
                            Description = "We'll get you the selected amount of talismans!",
                            ImageURL = "/images/service/talismans.jpg",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 1.00m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Talismans"
                        },
                        new
                        {
                            Id = 6,
                            Description = "We will complete the Shadow of the Erdtree DLC for you!",
                            ImageURL = "/images/service/shadow.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 150.00m,
                            PurchaseCount = 0,
                            ServiceType = 0,
                            Title = "Shadow of the Erdtree"
                        },
                        new
                        {
                            Id = 7,
                            Description = "We'll get you the selected amount of runes!",
                            ImageURL = "/images/service/runes.jpg",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 1.50m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Runes"
                        },
                        new
                        {
                            Id = 8,
                            Description = "We will complete the selected dungeon for you!",
                            ImageURL = "/images/service/dungeons.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 39.00m,
                            PurchaseCount = 0,
                            ServiceType = 2,
                            Title = "Dungeon Runs"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ServiceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the ServiceOption.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Name of the ServiceOption.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price associated with this ServiceOption.");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Reference to the associated Service entity.");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Margit the Fell Omen",
                            Price = 10.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Godrick the Grafted",
                            Price = 12.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red Wolf of Radagon",
                            Price = 15.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Leonine Misbegotten",
                            Price = 15.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Malenia, Blade of Miquella",
                            Price = 25.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stormveil Castle",
                            Price = 39.00m,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 7,
                            Name = "Volcano Manor",
                            Price = 49.00m,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Crumbling Farum Azula",
                            Price = 59.00m,
                            ServiceId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationPlatform", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationPlatform_Applications_Id");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationPlatform_Platforms_Id");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Application", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Article", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.BoosterPlatform", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", "Booster")
                        .WithMany()
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Cart", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "Client")
                        .WithOne("Cart")
                        .HasForeignKey("EldenBoost.Infrastructure.Data.Models.Cart", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.CartItem", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Order", "Order")
                        .WithMany("ChatMessages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", "Booster")
                        .WithMany("Orders")
                        .HasForeignKey("BoosterId");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");

                    b.Navigation("Client");

                    b.Navigation("Payment");

                    b.Navigation("Platform");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", "Booster")
                        .WithMany("Payments")
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ServiceOption", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Service", "Service")
                        .WithMany("Options")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reviews");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Service", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
