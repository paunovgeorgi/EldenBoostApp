// <auto-generated />
using System;
using EldenBoost.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EldenBoost.Infrastructure.Migrations
{
    [DbContext(typeof(EldenBoostDbContext))]
    [Migration("20241030150550_ApplicationUsers_Seed")]
    partial class ApplicationUsers_Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationPlatform", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("ApplicationId");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("PlatformId");

                    b.HasKey("ApplicationId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("ApplicationsPlatforms", (string)null);
                });

            modelBuilder.Entity("BoosterPlatform", b =>
                {
                    b.Property<int>("BoosterId")
                        .HasColumnType("int")
                        .HasColumnName("BoosterId");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("PlatformId");

                    b.HasKey("BoosterId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("BoostersPlatforms", (string)null);
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Application.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int")
                        .HasComment("Type of application submitted by the user.");

                    b.Property<int>("Availability")
                        .HasColumnType("int")
                        .HasComment("Availability status of the applicant, typically represented in hours or a defined scale.");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of the applicant.");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Experience level or description provided by the applicant.");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the application has been approved.");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the application has been rejected.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the application.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("Nickname for application user");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Profile picture application user.");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a13592d9-c4d0-4184-a3f9-dc7c66640808",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2968e5ca-c1f9-490d-b1b4-300d8c82adb9",
                            Email = "cloud@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Cloud",
                            NormalizedEmail = "CLOUD@BOOSTER.COM",
                            NormalizedUserName = "CLOUD@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEBrGQs9g09QRDHacTl8NvuZ/qhKkJrm6QXdGC8EYF8uHxAyWtQ0w517NcfYKdmoBw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/boosters/cloud.jpg",
                            SecurityStamp = "8f722837-0b3f-4ff0-b176-e8e05ae8d78e",
                            TwoFactorEnabled = false,
                            UserName = "cloud@booster.com"
                        },
                        new
                        {
                            Id = "b4e77aa9-36ad-4010-987e-9fd6d7b0d6ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02c90fd2-4d83-40c1-abce-877426bad54c",
                            Email = "heisenberg@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. White",
                            NormalizedEmail = "HEISENBERG@BOOSTER.COM",
                            NormalizedUserName = "HEISENBERG@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHS23U0qkYQn3xJ2uZx3+Uxn6GVkBc5oXWo3SxZg/WkHLnKDcEHdPVSQCkho816Xuw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/boosters/heisenberg.jpg",
                            SecurityStamp = "ff1fc49c-bd0f-4918-b143-01f645c84a4d",
                            TwoFactorEnabled = false,
                            UserName = "heisenberg@booster.com"
                        },
                        new
                        {
                            Id = "54cf5237-4a7c-4050-9570-7cb5cb753aa5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea12d05f-ab3a-4b4c-883e-e9520e9f6a58",
                            Email = "dva@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "D.VA",
                            NormalizedEmail = "DVA@BOOSTER.COM",
                            NormalizedUserName = "DVA@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqGpIZPGwgqgBWlzYJhkwqcVChgLy6BUPMpsnLp7Q9XjweQSpzbrQnXcmGpJCX7rQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/boosters/dva.jpg",
                            SecurityStamp = "a9ba2b72-c4f5-4959-8f78-1614e422216a",
                            TwoFactorEnabled = false,
                            UserName = "dva@booster.com"
                        },
                        new
                        {
                            Id = "ca3439dd-d67e-4733-8b72-a497af8b4c64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50b22881-ebaa-4493-8625-274465cc3620",
                            Email = "johnwick@booster.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. Wick",
                            NormalizedEmail = "JOHNWICK@BOOSTER.COM",
                            NormalizedUserName = "JOHNWICK@BOOSTER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmBVXKsTWaJFNG5OfVSes4eyN/UPwMXjIzb0xBVfQHbqsstMWGcbFJhtvXC5WSduw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/boosters/john-wick.jpg",
                            SecurityStamp = "885c560a-8788-4015-a2f5-a00995418226",
                            TwoFactorEnabled = false,
                            UserName = "johnwick@booster.com"
                        },
                        new
                        {
                            Id = "362456a6-e52a-4065-a619-7af22c96e1e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4765a83-28a1-4b5c-b77e-1e54d09817f2",
                            Email = "obiwan@author.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Master Kenobi",
                            NormalizedEmail = "OBIWAN@AUTHOR.COM",
                            NormalizedUserName = "OBIWAN@AUTHOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECht4X81rdV7zlG1J1U83mkb8j5avcPMSmeqQOAzH78QK+UhB147uTss9ybcKbB4wg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/authors/obiwan.jpg",
                            SecurityStamp = "8c080d07-977e-47ed-931e-17e2a2b47485",
                            TwoFactorEnabled = false,
                            UserName = "obiwan@author.com"
                        },
                        new
                        {
                            Id = "851792db-67bb-4b08-8c03-ac2643a0600a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "169a3cc9-b467-4a48-9312-3b6567671589",
                            Email = "quigon@author.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Qui-Gon-Jinn",
                            NormalizedEmail = "QUIGON@AUTHOR.COM",
                            NormalizedUserName = "QUIGON@AUTHOR.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKcHBhU7sn0REw0crkq6AiBZBjCWzh/oZ05EyFoMVL/3MuyVp+NJQIVf6Mn2789tg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/authors/quigon.jpg",
                            SecurityStamp = "9a8e05d8-8ae9-4932-8530-445c15f6815e",
                            TwoFactorEnabled = false,
                            UserName = "quigon@author.com"
                        },
                        new
                        {
                            Id = "2eff52b0-3277-456f-ac78-34553d260ac6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ae8aa4f-7c09-4eda-8fd7-5f546422a398",
                            Email = "thebat@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Master Wayne",
                            NormalizedEmail = "THEBAT@CLIENT.COM",
                            NormalizedUserName = "THEBAT@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRG5lWQBVQbmLC8dlKxvMme5SbQo8SYQGlhh2Jwe1u22mVRApN48y0sw2lEcNRNjA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/clients/thebat.jpg",
                            SecurityStamp = "2a75aebe-505d-4198-893e-f2c2248b14c7",
                            TwoFactorEnabled = false,
                            UserName = "thebat@client.com"
                        },
                        new
                        {
                            Id = "1291e6cd-1aac-4f8a-af4d-4980f64aff27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d933a88-cf6d-4eed-9283-d65dc1b66fdd",
                            Email = "theone@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Mr. Anderson",
                            NormalizedEmail = "THEONE@CLIENT.COM",
                            NormalizedUserName = "THEONE@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmOHl901Keto+EDlNrGV+3Bd65wVZMikV8QiEaXQYbxyjymphIXWr964/zf8m2pUg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/clients/theone.jpg",
                            SecurityStamp = "633858e2-0b3e-40d8-afc8-937e0f2059f8",
                            TwoFactorEnabled = false,
                            UserName = "theone@client.com"
                        },
                        new
                        {
                            Id = "97e8127d-abaf-4980-9938-e388453fcbb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeeb1f5c-886b-42e3-86d3-d6cdbf63b679",
                            Email = "leon@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Leon S. Kennedy",
                            NormalizedEmail = "LEON@CLIENT.COM",
                            NormalizedUserName = "LEON@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtBp8r1eZwdSCtAMmMg9W7M7skaf8bJ73/Nrgkqg5DBOah8dMsttlE+aun0P/68KQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/clients/leon.jpg",
                            SecurityStamp = "427511bc-68ca-4611-9c90-6d2562619b44",
                            TwoFactorEnabled = false,
                            UserName = "leon@client.com"
                        },
                        new
                        {
                            Id = "871505e9-3338-487d-8496-760de2e1f2c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e40cd0a-db13-4eef-8fff-019c25950638",
                            Email = "dante@client.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Dante",
                            NormalizedEmail = "DANTE@CLIENT.COM",
                            NormalizedUserName = "DANTE@CLIENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHpYQP2qmlF8npVgY2+F7YWwZhd9eGLlbjQJJqrJViH4Q61LLyVcd0iq7kH5F+8rPg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "images/clients/dante.jpeg",
                            SecurityStamp = "4c0881ea-45fc-48be-a3e0-37e78d6a159a",
                            TwoFactorEnabled = false,
                            UserName = "dante@client.com"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Article.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleType")
                        .HasColumnType("int")
                        .HasComment("Type of Article, represented by the ArticleType enumeration.");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("ID of the author who created the Article.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Main content of the Article.");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("URL of the image associated with the Article.");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Article was released or published.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title of the Article.");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Author");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of residence for the Author.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the author.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Booster.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of residence for the Booster.");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasComment("Current average rating of the Booster.");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int")
                        .HasComment("Total number of ratings received by the Booster.");

                    b.Property<decimal>("TotalEarned")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount earned by the Booster (completed orders only).");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User ID associated with the Booster.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Boosters");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Order.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoosterId")
                        .HasColumnType("int")
                        .HasComment("ID of the assigned Booster, if any.");

                    b.Property<decimal>("BoosterPay")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount to be paid to the Booster.");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("ID of the client placing the order.");

                    b.Property<bool>("HasStream")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order includes streaming.");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional information provided for the Order.");

                    b.Property<bool>("IsAddedToPayment")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been added to a payment batch.");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been archived.");

                    b.Property<bool>("IsExpress")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order is an express request.");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been paid to the booster.");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Order has been rated by the client.");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasComment("ID of the payment associated with the Order, if any.");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasComment("ID of the platform associated with the Order.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of the Order.");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("ID of the associated Service.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Current status of the Order.");

                    b.Property<DateTime>("TimeOfPurchase")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp of when the Order was placed.");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Payment.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount of the Payment.");

                    b.Property<int>("BoosterId")
                        .HasColumnType("int")
                        .HasComment("Foreign key linking the Payment to the associated Booster.");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Payment was completed.");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the Payment has been completed.");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the Payment was issued.");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Platform.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Name of the Platform.");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Playstation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Review.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(248)
                        .HasColumnType("nvarchar(248)")
                        .HasComment("Content of the review, limited to 248 characters.");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the review was created, defaulting to UTC now.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key referencing the User who created the review.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the Service.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(248)
                        .HasColumnType("nvarchar(248)")
                        .HasComment("Service description.");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Service image url.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Flag for active and inactive services.");

                    b.Property<int>("MaxAmount")
                        .HasColumnType("int")
                        .HasComment("Max amount for slider type services.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Service price.");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("int")
                        .HasComment("Service purchase count.");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int")
                        .HasComment("Service type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Service title.");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "You will get a 100% game completion and all the items we aquire along the way!",
                            ImageURL = "images/service/gameCompletion.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 300.00m,
                            PurchaseCount = 0,
                            ServiceType = 0,
                            Title = "Game Completion"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Select the boss you'd like us to defeat and our boosters will get the job done!",
                            ImageURL = "images/service/bossKills.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 10.00m,
                            PurchaseCount = 0,
                            ServiceType = 2,
                            Title = "Boss Kills"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Select the desired amount of levels you'd like and we'll levep-up your character in no time!",
                            ImageURL = "images/service/leveling.png",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 2.50m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Leveling"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A professional Elden Ring player will giude you and coach you along the way of your journey. Simply select the amount of hours you'd like to purchase.",
                            ImageURL = "images/service/coaching.jpg",
                            IsActive = true,
                            MaxAmount = 20,
                            Price = 10.00m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Coaching"
                        },
                        new
                        {
                            Id = 5,
                            Description = "We'll get you the selected amount of talismans!",
                            ImageURL = "images/service/talismans.jpg",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 1.00m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Talismans"
                        },
                        new
                        {
                            Id = 6,
                            Description = "We will complete the Shadow of the Erdtree DLC for you!",
                            ImageURL = "images/service/shadow.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 150.00m,
                            PurchaseCount = 0,
                            ServiceType = 0,
                            Title = "Shadow of the Erdtree"
                        },
                        new
                        {
                            Id = 7,
                            Description = "We'll get you the selected amount of runes!",
                            ImageURL = "images/service/runes.jpg",
                            IsActive = true,
                            MaxAmount = 100,
                            Price = 1.50m,
                            PurchaseCount = 0,
                            ServiceType = 1,
                            Title = "Runes"
                        },
                        new
                        {
                            Id = 8,
                            Description = "We will complete the selected dungeon for you!",
                            ImageURL = "images/service/dungeons.jpg",
                            IsActive = true,
                            MaxAmount = 0,
                            Price = 39.00m,
                            PurchaseCount = 0,
                            ServiceType = 2,
                            Title = "Dungeon Runs"
                        });
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ServiceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the ServiceOption.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Name of the ServiceOption.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price associated with this ServiceOption.");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Reference to the associated Service entity.");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Margit the Fell Omen",
                            Price = 10.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Godrick the Grafted",
                            Price = 12.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red Wolf of Radagon",
                            Price = 15.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Leonine Misbegotten",
                            Price = 15.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Malenia, Blade of Miquella",
                            Price = 25.00m,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Stormveil Castle",
                            Price = 39.00m,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 7,
                            Name = "Volcano Manor",
                            Price = 49.00m,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Crumbling Farum Azula",
                            Price = 59.00m,
                            ServiceId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationPlatform", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationPlatform_Applications_Id");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationPlatform_Platforms_Id");
                });

            modelBuilder.Entity("BoosterPlatform", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", null)
                        .WithMany()
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BoosterPlatform_Boosters_Id");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BoosterPlatform_Platforms_Id");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Application", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Article", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", "Booster")
                        .WithMany("Orders")
                        .HasForeignKey("BoosterId");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");

                    b.Navigation("Client");

                    b.Navigation("Payment");

                    b.Navigation("Platform");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Booster", "Booster")
                        .WithMany("Payments")
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ServiceOption", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.Service", "Service")
                        .WithMany("Options")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EldenBoost.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Booster", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EldenBoost.Infrastructure.Data.Models.Service", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
