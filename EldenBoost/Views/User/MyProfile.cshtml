@using EldenBoost.Common.Enumerations
@using EldenBoost.Extensions
@model IEnumerable<OrderCardViewModel>

@{
    ViewBag.Title = "My Profile";
    string levelBadge = "";
    string level = "Novice";
    decimal progressPercentage = 0;
    decimal nextThreshold = 0;

    var levels = new List<(decimal Threshold, LevelType Level)>
    {
        (100, LevelType.Adventurer),
        (200, LevelType.Explorer),
        (500, LevelType.Pathfinder),
        (1000, LevelType.Trailblazer),
        (1500, LevelType.Vanguard),
        (2500, LevelType.Hero),
        (5000, LevelType.Champion),
        (10000, LevelType.Conqueror),
        (15000, LevelType.Legend),
        (25000, LevelType.Myth)
    };

    // Determine current level and progress
    for (int i = 0; i < levels.Count; i++)
    {
        var (threshold, levelType) = levels[i];
        if (ViewBag.TotalSpent >= threshold)
        {
            level = levelType.ToString();
            levelBadge = levelType switch
            {
                LevelType.Adventurer => "fa-solid fa-compass",
                LevelType.Explorer => "fa-solid fa-binoculars",
                LevelType.Pathfinder => "fa-solid fa-map",
                LevelType.Trailblazer => "fa-solid fa-fire",
                LevelType.Vanguard => "fa-solid fa-flag",
                LevelType.Hero => "fa-solid fa-medal",
                LevelType.Champion => "fa-solid fa-trophy",
                LevelType.Conqueror => "fa-solid fa-castle",
                LevelType.Legend => "fa-solid fa-scroll",
                LevelType.Myth => "fa-solid fa-star",
                _ => "fa-solid fa-question-circle"
            };
        }
        else
        {
            nextThreshold = threshold;
            break;
        }
    }

    var currentLevel = levels.LastOrDefault(l => ViewBag.TotalSpent >= l.Threshold);
    var nextLevel = levels.FirstOrDefault(l => l.Threshold > ViewBag.TotalSpent);

    decimal previousThreshold = currentLevel.Threshold;
    nextThreshold = nextLevel.Threshold > 0 ? nextLevel.Threshold : previousThreshold;

    progressPercentage = nextLevel.Threshold > 0
        ? ((ViewBag.TotalSpent - previousThreshold) / (nextThreshold - previousThreshold)) * 100
        : 100; 

    if (string.IsNullOrEmpty(ViewBag.ProfilePicture))
    {
        ViewBag.ProfilePicture = "https://i.pinimg.com/originals/ae/91/e4/ae91e4161c6f7e3c18815680aa75cf44.jpg";
    }
}

<form style="display:none">
    @Html.AntiForgeryToken()
</form>

<h2 class="text-center" style="margin-top:80px">@ViewBag.Title</h2>
<hr />


@if (User.IsAdmin())
{
    <div class="row justify-content-evenly mt-5 align-content-center" style="flex-direction:column">
        <div class="profile-pic">
            <img src="@ViewBag.ProfilePicture" class="" alt="Profile Picture">
            <div class="card-body">
                <h4 class="mt-1 text-center">@ViewBag.Username</h4>
                <hr />
            </div>
        </div>
        <button class="btn btn-outline-light" style="width:174px; align-self:center; border-top: 0px" onclick="openChangeProfilePicModal()">Change Profile Picture</button>
    </div>
}
else
{
    <div class="row justify-content-evenly mt-5 align-content-center" style="flex-direction:column">
        <div class="profile-pic">
            <img src="@ViewBag.ProfilePicture" class="" alt="Profile Picture">
            <div class="card-body">
                <h4 class="mt-1 text-center">@ViewBag.Username</h4>
                <hr />
                <p class="card-text text-light">Total Orders: @ViewBag.TotalOrders</p>
                <p class="card-text text-light">Total Spent: @($"${ViewBag.TotalSpent:f2}")</p>
                <p class="card-text text-light">Level: @level <i class="@levelBadge" style="font-weight: bold;"></i></p>

                <div class="progress mt-2" style="background-color: var(--secondary-light); display: flex; justify-content: start; align-items:start;">
                    <div class="progress-bar px-4" role="progressbar"
                         style="width: @progressPercentage%; background-color: var(--main-light);"
                         aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100">
                        @progressPercentage.ToString("0.##")%
                    </div>
                </div>

                @if (progressPercentage < 100)
                {
                    <span class="mt-2" style="font-size: 13px;">$@(nextThreshold - ViewBag.TotalSpent) More Needed</span>
                }
                else
                {
                    <span class="mt-2" style="font-size: 13px;">Congratulations, you've reached the highest level!</span>
                }
            </div>
        </div>
        <button class="btn btn-outline-light" style="width:174px; align-self:center; border-top: 0px" onclick="openChangeProfilePicModal()">Change Profile Picture</button>
    </div>




@if (!Model.Any())
{
    <h2 class="text-center" style="margin-top: 8px;">You don't have any orders.</h2>
}
else
{
    <hr />

    <h2 class="text-center">Pending Orders</h2>
        @if (!Model.Any(m => m.Status == "Pending"))
        {
            <h4 class="text-center" style="margin-top: 8px;">- You don't have any Pending orders. -</h4>
        }

    <div class="row">
        @foreach (var order in Model.Where(m => m.Status == "Pending"))
        {
            <partial name="_OrderPartial" model="@order" />
        }
    </div>

    <hr />

    <h2 class="text-center">Active Orders</h2>

    @if (!Model.Any(m => m.Status == "Working"))
    {
        <h4 class="text-center" style="margin-top: 8px;">- You don't have any Active orders. -</h4>
    }

    <div class="row">
        @foreach (var order in Model.Where(m => m.Status == "Working"))
        {
            <partial name="_OrderPartial" model="@order" />
        }
    </div>

    <hr />
    <h2 class="text-center">Completed Orders</h2>

    @if (!Model.Any(m => m.Status == "Completed"))
    {
        <h4 class="text-center" style="margin-top: 8px;">- You don't have any Completed orders. -</h4>
    }
    <div class="row">
        @foreach (var order in Model.Where(m => m.Status == "Completed"))
        {
            <partial name="_OrderPartial" model="@order" />
        }
    </div>
}

}
   
<script src="~/js/profile-picture.js"></script>
<script src="~/js/rate-booster.js"></script>